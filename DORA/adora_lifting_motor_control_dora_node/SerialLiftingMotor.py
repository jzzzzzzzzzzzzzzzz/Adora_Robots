import serial
import time
import struct
class SerialLiftingMotor: 
    def __init__(self):
        self.ser = None  # 串口对象
        self.serial_opened = False  # 串口状态标志

        self.init_serial("/dev/ttyACM0",19200)
        self.motor_init()
        #其中数值 3276800 表示电机转动100圈，电机转动1圈的数值是32768.
        self.max_lifting_distance = 700
        self.robot_name = "ADORA_A2_MAX"
        self.Ratio_K_1 = 0.63636364 #// 电机每转动一圈丝杆行进的距离（单位 mm ） 
        self.Ratio_K_2 = 32768 # 电机转动1圈的编码器反馈的数值是32768

        self.MIN_MOTOR_POSITION = 0
        self.MAX_MOTOR_POSITION = 36044800  #//勿修改！！！ 32768*1100(圈) = 36044800 对应700mm行程的丝杠，
        self.motor_positon_read = 0
        self.motor_position_set(0)
        # 配置串口参数
    def init_serial(self, port, baudrate=115200):
        try:
                # 初始化串口，设置串口参数
            self.ser = serial.Serial(
                port=port,  # 串口名称
                baudrate=baudrate,  # 波特率
                bytesize=serial.EIGHTBITS,  # 数据位8位
                parity=serial.PARITY_NONE,  # 校验位，无校验位
                stopbits=serial.STOPBITS_ONE,  # 停止位1位
                timeout=0.1  # 超时时间
        )
        except Exception as e:
            print("串口初始化失败:", e)

    def run(self):
 
        #while True:
 
        self.motor_position_read()
        #time.sleep(0.1)

        uart_buffer_data = self.ser.read_all()  

        if(len(uart_buffer_data) < 7):
            print("uart_buffer_data < 7")
            return
        
        tem_bytes = bytearray()
        tem_bytes.extend(uart_buffer_data[0:7]) #高位存低地址
        tem_bytes_str = ' '.join(f"{b:02X}" for b in tem_bytes)
        print(f"HEtem_bytes_strX: [{tem_bytes_str}]")

        recives_crc = self.calculate_crc16(tem_bytes)
        if recives_crc:
            # 打印十六进制和ASCII格式
            hex_str = ' '.join(f"{b:02X}" for b in uart_buffer_data)
            crc_str = ' '.join(f"{b:02X}" for b in recives_crc)
            ascii_str = ''.join(chr(b) if 32 <= b <= 126 else '.' for b in recives_crc)
            print(f"HEX: [{hex_str}] CRC: [{crc_str}]  ASCII: [{ascii_str}]")
        #print("daying:")


        if(uart_buffer_data[0] == 0x01  
            and uart_buffer_data[1] == 0x03 
            and uart_buffer_data[2] == 0x04):

            position_bytes = bytearray()
            position_bytes.extend([uart_buffer_data[5], uart_buffer_data[6],uart_buffer_data[3], uart_buffer_data[4]]) #高位存低地址
            self.motor_positon_read = int.from_bytes(position_bytes,'big',signed = True)
            print("befor position:", self.motor_positon_read)
            self.motor_positon_read = int(self.motor_positon_read/self.Ratio_K_2*self.Ratio_K_1)/1
            print("after position:", self.motor_positon_read)


    def motor_init(self):
        data_array_1 = bytearray()
        data_array_1.extend([0x01, 0x06, 0x00, 0x00, 0x00, 0x01, 0x48, 0x0A])  # enable modbus

        data_array_2 = bytearray()
        data_array_2.extend([0x01, 0x06, 0x00, 0x01, 0x00, 0x01, 0x48, 0xCA])  # enable motor

        data_array_3 = bytearray()
        data_array_3.extend([0x01, 0x06, 0x00, 0x03, 0x13, 0x88, 0x74, 0x9C])  # accel speed 5000

        data_array_4 = bytearray()
        data_array_4.extend([0x01, 0x06, 0x00, 0x02, 0x05, 0xDC, 0x2A, 0xC3])  # speed 1500
        
        if not self.ser.is_open:
            self.ser.open()
            
        # 发送数据
        self.ser.write(data_array_1)
        time.sleep(0.2)
        self.ser.write(data_array_2)
        time.sleep(0.2)
        self.ser.write(data_array_3)
        time.sleep(0.2)
        self.ser.write(data_array_4)
        time.sleep(0.2)

    def calculate_crc16(self,data: bytes) -> bytes:
        auchCRCHi = [ # CRC 高位字节值表 */
            0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
            0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
            0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 
            0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
            0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 
            0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
            0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 
            0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
            0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 
            0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
            0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
            0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
            0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 
            0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
            0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 
            0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
            0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40
        ]
        #  CRC 低位字节值表*/
        auchCRCLo = [
            0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 
            0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA,
            0xCB, 0x0B, 0xC9, 0x09, 0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 
            0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15,
            0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3, 0x11, 0xD1, 0xD0, 0x10, 0xF0, 
            0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 
            0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 0x3B, 
            0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 
            0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 
            0xE7, 0xE6, 0x26, 0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 
            0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 
            0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 
            0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 
            0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5, 0x77, 0xB7, 
            0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91, 
            0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 
            0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 
            0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 
            0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C, 0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 
            0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 0x40
        ]
    
        
        crc_hi = 0xFF  # 高字节初始化
        crc_lo = 0xFF  # 低字节初始化
        
        for byte in data:
            # 计算索引（修正原代码中的 *puchMsgg++ 错误）
            uIndex = crc_hi ^ byte
            # 更新CRC值
            temp = crc_hi
            crc_hi = crc_lo ^ auchCRCHi[uIndex]
            crc_lo = auchCRCLo[uIndex]
        
        # 返回组合后的CRC值（注意高位在前）
        return bytes([crc_hi, crc_lo])
    
    # 读取电机位置
    def motor_position_read(self):
        data_array_1 = bytearray()
        data_array_1.extend([0x01, 0x03, 0x00, 0x16, 0x00, 0x02])  # read motor global position
        crc_values = self.calculate_crc16(data_array_1) # calculate crc
        #print(f"CRC16: {crc_values[1]}")  # 应输出 0x480A
        data_array_1.extend([crc_values[0], crc_values[1]])
        #print(f"CRC16: 0x{data_array_1.hex().upper()}")
        
        if not self.ser.is_open:
            self.ser.open()
        # 发送数据
        self.ser.write(data_array_1)
            

    #  电机M8010HG8 额定转速2500RPM (加速比8    0-277RPM)  4NM 的型号
    # 丝杠起点位置： 0 
    # 丝杠终点位置： 32768*1100(圈) = 36044800 对应700mm行程的丝杠，
    # 其中32768是电机外部的转轴转动一圈的值。
    def motor_position_set(self,position_value):
        data_array_1 = bytearray()
        data_array_1.extend([0x01, 0x7b, 0x00, 0x00, 0x00, 0x00])  # set motor position

        if(position_value < self.MIN_MOTOR_POSITION):
            position_value = self.MIN_MOTOR_POSITION 
        elif(position_value > self.MAX_MOTOR_POSITION):
            position_value = self.MAX_MOTOR_POSITION

        data_array_1[2] = (position_value>>24) & 0xff
        data_array_1[3] = (position_value>>16) & 0xff
        data_array_1[4] = (position_value>>8) & 0xff
        data_array_1[5] = position_value & 0xff


        print(f"CRC16: 0x{data_array_1.hex().upper()}")

        crc_values = self.calculate_crc16(data_array_1) # calculate crc
        data_array_1.extend([crc_values[0], crc_values[1]])
        if not self.ser.is_open:
            self.ser.open()
            
        # 发送数据
        self.ser.write(data_array_1)


    # 输入参数 uint32_msg 表示距离(单位 mm)
    def cmd_vel_callback(self, uint32_msg):
        tem_distance = uint32_msg
		
        if(tem_distance > self.max_lifting_distance):
            tem_distance = self.max_lifting_distance-5 #//预留5mm行程

        # 丝杠起点位置： 0 
        # 丝杠终点位置： 32768*1100(圈) = 36044800 对应700mm行程的丝杠， 0.63636363
        # 其中32768是电机外部的转轴转动一圈的值。
        # 700mm/0.63636363*32768
        tem_value = self.float_to_uint32(tem_distance/self.Ratio_K_1*self.Ratio_K_2)
        print("recived distance  (mm): %d  , control value:  %2.f\n",tem_distance,tem_value)
        self.motor_position_set(tem_value)


    def float_to_uint32(f):
        # 将浮点数打包为 IEEE 754 单精度格式（4字节）
        packed = struct.pack('>f', f)
        # 解包为 uint32
        return struct.unpack('>I', packed)[0]

if __name__ == "__main__":
    app = SerialLiftingMotor()
    app.run()
    while True:
        app.cmd_vel_callback(200)
        time.sleep(20)   
        app.cmd_vel_callback(0)
        time.sleep(20)  
